sms = read.csv('SMSSpamCollection.txt', header = T, sep = 't', stringsAsFactor = F, quote = '',fill = T, strip.white = FALSE)
getwd()
setwd('d:/rworkspace/ml')
getwd()
sms = read.csv('SMSSpamCollection.txt', header = T, sep = 't', stringsAsFactor = F, quote = '',fill = T, strip.white = FALSE)
sms = read.csv2('SMSSpamCollection.txt', header = T, sep = ',', stringsAsFactors = F)
sms = read.csv2('SMSSpamCollection.txt', header = T, sep = ',', stringsAsFactors = F, quote = '')
str(sms)
View(sms)
sms = read.csv2('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '')
sms = read.csv2('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', colClasses = NA)
sms = read.csv2('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', colClasses = NA, col.names = 2)
sms = read.csv2('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', colClasses = NA, col.names = c('type', 'text'))
sms = read.csv2('SMSSpamCollection.txt', header = F, sep = ' ', stringsAsFactors = F, quote = '', colClasses = NA, col.names = c('type', 'text'))
sms = read.csv2('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', colClasses = NA)
sms = read.csv2('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', fill = T)
sms = read.csv2('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', rownames = FALSE.)
sms = read.csv2('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', rownames = FALSE)
sms = read.csv('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', rownames = FALSE)
sms = read.table('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', rownames = FALSE)
sms = read.csv('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '')
sms = read.csv('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', encoding = 'UTF-8')
sms = read.csv('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = '', encoding = 'GBK')
sms = read.csv('SMSSpamCollection.txt', header = T, sep = ' ', stringsAsFactors = F, quote = Quote, encoding = 'GBK')
sms = read.csv('SMSSpamCollection.txt', header = f, sep = ' ', stringsAsFactors = F, quote = '', encoding = 'GBK')
sms = read.csv('SMSSpamCollection.txt', header = F, sep = ' ', stringsAsFactors = F, quote = '', encoding = 'GBK')
sms = read.csv('SMSSpamCollection.txt', header = f, sep = '', stringsAsFactors = F, quote = '', encoding = 'GBK')
sms = read.csv('SMSSpamCollection.txt', header = F, sep = '', stringsAsFactors = F, quote = '', encoding = 'GBK')
sms = read.csv('sms_spam.cvs', header = F, sep = '', stringsAsFactors = F, quote = '', encoding = 'GBK')
sms = read.csv('sms_spam.csv', header = F, sep = '', stringsAsFactors = F, quote = '', encoding = 'GBK')
sms = read.csv('sms_spam.csv', header = F, sep = ',', stringsAsFactors = F, quote = '', encoding = 'GBK')
sms = read.csv('sms_spam.csv', header = F, sep = ',', stringsAsFactors = F, quote = '', encoding = 'UTF-8')
sms$type
sms = read.csv('sms_spam.csv', header = T, sep = ',', stringsAsFactors = F, quote = '', encoding = 'UTF-8')
sms = read.csv('sms_spam.csv', header = F, sep = ',', stringsAsFactors = F, quote = '', row.names = c('type', 'text'),encoding = 'UTF-8')
sms = read.csv('sms_spam.csv', header = F, sep = ',', stringsAsFactors = F, quote = '', row.names = c('type', 'text', V3, V4),encoding = 'UTF-8')
sms = read.csv('sms_spam.csv', header = F, sep = ',', stringsAsFactors = F, quote = '', row.names = c('type', 'text', 'V3', 'V4'),encoding = 'UTF-8')
str(sms)
rname = c('type', 'text', 'v3', 'v4')
sms = read.csv('sms_spam.csv', header = F, sep = ',', stringsAsFactors = F, quote = '', row.names = rname,encoding = 'UTF-8')
sms = read.csv('sms_spam.csv', header = F, sep = ',', stringsAsFactors = F, quote = '', col.names = rname,encoding = 'UTF-8')
sms = sms[-1]
sms = read.csv('sms_spam.csv', header = F, sep = ',', stringsAsFactors = F, quote = '', col.names = rname,encoding = 'UTF-8')
sms = sms[-1]
sms = read.csv('sms_spam.csv', header = F, sep = ',', stringsAsFactors = F, quote = '', col.names = rname,encoding = 'UTF-8')
sms = sms[,-1]
sms = read.csv('sms_spam.csv', header = F, sep = ',', stringsAsFactors = F, quote = '', col.names = rname,encoding = 'UTF-8')
sms = sms[-1,]
sms$type
factor(sms$type)
factor(sms$type) -> sms$type
table(sms$type)
bc = read.csv('wisc_bc_data.csv', sep = ',')
View(bc)
View(bc)
str(bc)
bc$diagnosis
table(bc$diagnosis)
bc$diagnosis -> mydata$type
bc$diagnosis -> listA
sms$text -> listB
mydata = data.frame(listA, listB)
listB = listB[1:569]
mydata = data.frame(listA, listB)
view(mydata)
View(mydata)
View(mydata)
names(mydata)
names(mydata) = c('type', 'text')
library(tm)
library(NLP)
sms <- mydata
sms_corpus <- Corpus(VectorSource(sms$text))
sms_corpus
class(sms_corpus)
print(vignette('tm'))
print(sms_corpus)
sms_corpus
inspect(sms_corpus[1:3])
Corpus_clean <- tm_map(sms_corpus, tolower)
Corpus_clean <- tm_map(Corpus_clean, removeNumbers)
Corpus_clean <- tm_map(Corpus_clean, removeWords, stopwords)
Corpus_clean <- tm_map(Corpus_clean, removeWords, stopwords)
Corpus_clean1 <- tm_map(Corpus_clean, removeWords, stopwords)
Corpus_clean1 == Corpus_clean
Corpus_clean <- tm_map(Corpus_clean, removeWords, stopwords)
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
corpus_clean
inspect(corpus_clean[1:3])
DocumentTermMatrix(corpus_clean) -> sms_dtm
sms_dtm
print(sms_dtm)
569*0.25
a = 143
b =569-a
sms_raw_train <- sms[1:a, ]
a = 569*0.75
a
a = 427
b = 569-a
sms_raw_train <- sms[1:a, ]
sms_raw_test <- sms[a + 1: 569]
sms_raw_test <- sms[a + 1: 569, ]
sms_dtm_train < - sms_dtm[1:a, ]
sms_dtm_train < - sms_dtm[1:a,]
smsn < - sms_dtm[1:a,]
sms_dtm_train <- sms_dtm[1:a,]
sms_dtm_test <- sms_dtm[a+1:569,]
sms_dtm_test <- sms_dtm[a+1:569,]
siza(sms_dtm)
sms_dtm_test <- sms_dtm[a+1:569,]
sms_dtm_test <- sms_dtm[a+1:568,]
sms_dtm_test <- sms_dtm[a+1:568, ]
sms_dtm_test <- sms_dtm[ a + 1:568, ]
sms_dtm_test <- sms_dtm[ (a + 1):568, ]
sms_raw_test <- sms[(a+1):569,]
sms_dtm_test <- sms_dtm[ (a + 1):569, ]
sms_dtm_train <- sms_dtm[1:267,]
sms_dtm_test <- sms_dtm[268: 569,]
sms_corpus_train <- corpus_clean[1:267]
sms_corpus_test <- corpus_clean[268:569]
prop.table(table(sms_raw_train$type))
prop.table(table(sms_raw_test$type))
install.packages('wordcloud')
library(wordcloud)
library(RColorBrewer)
wordcloud(sms_corpus_train, min.freq = 40, random.order = F)
wordcloud(sms_corpus_train, min.freq = 10, random.order = F)
wordcloud(sms_corpus_train, min.freq = 40, random.order = F)
wordcloud(sms_corpus_train, min.freq = 40, random.order = T)
spam <- subset(sms_raw_train, type == 'M')
ham <- subset(sms_raw_train, type == 'B')
wordcloud(spam$text, max.words = 40, scale = c(3, 0.5))
wordcloud(ham$text, max.words = 40, scale = c(3, 0.5))
findFreqTerms(sms_dtm_train, 5)
sms_dict <-Dictionary(findFreqTerms(sms_dtm_train, 5))
sms_dict<-Dictionary(findFreqTerms(sms_dtm_train, 5))
?Dictionary
?Dictionary()
??Dictionary()
library(rlang)
sms_dict<-Dictionary(findFreqTerms(sms_dtm_train, 5))
sms_dict <- findFreqTerms(sms_dtm_train, 5)
sms_train <- DocumentTermMatrix(sms_corpus_train, list(dictionary = sms_dict))
sms_test  <- DocumentTermMatrix(sms_corpus_test, list(dictionary = sms_dict))
convert_counts = function(x){}
convert_counts = function(x){ }
convert_counts = function(x){
x = ifelse(x > 0, 1, 0)
x = factor(x, levels = c(0, 1), labels = c(''No'', ''Yes''))
convert_counts = function(x){
x = ifelse(x> 0, 1, 0}
x = factor(x, levels = c(0, 1),
labels = c(""No"", ""Yes""))
return(x)
}
convert_counts = function(x){
x = ifelse(x> 0, 1, 0}
x = factor(x, levels = c(0, 1),labels = c(""No"", ""Yes""))
return(x)
}
convert_counts = function(x){
x = ifelse(x> 0, 1, 0}
x = factor(x, levels = c(0, 1),labels = c(""No"", ""Yes""))
return(x)}
convert_counts = function(x){
x = ifelse(x> 0, 1, 0)
x = factor(x, levels = c(0, 1),labels = c(""No"", ""Yes""))
return(x)
}
convert_counts = function(x){
x = ifelse(x> 0, 1, 0)
x = factor(x, levels = c(0, 1),labels = c(""No"", ""Yes""))
return(x)
}
convert_counts = function(x){
x = ifelse(x> 0, 1, 0)
x = factor(x, levels = c(0, 1),labels = c(""No"", ""Yes""))
return(x)
}
convert_counts = function(x){x = ifelse(x> 0, 1, 0)
x = factor(x, levels = c(0, 1),labels = c(""No"", ""Yes""))
return(x)
}
plot(cars)
plot(cars)
plot(cars)
install.packages("shiny")
runExample("01_hello")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(shiny)
runExample('01_hello')
library(shiny)
runExample('01_hello')
# Define UI for application that plots random distributions
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
install.packages("devtools")
install.packages(contrib.url)
install.packages('contrib.url'')
''
install.packages('contrib.url')
install.packages("rmarkdown")
install.packages("devtools") # 如果以前没有安装 devtools 包
devtools::install_github("rstudio/rmarkdown")
install.packages("rmarkdown")
